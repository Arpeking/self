name: Mobile CI
env:
  # Build environment versions
  # Node version is read from .nvmrc during workflow execution
  RUBY_VERSION: 3.2
  JAVA_VERSION: 17
  # Path configuration
  WORKSPACE: ${{ github.workspace }}
  APP_PATH: ${{ github.workspace }}/app
on:
  push:
    paths:
      - "common/**"
      - "app/**"
      - ".github/workflows/app.yml"
      - ".github/actions/**"

jobs:
  lint:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Read and sanitize Node.js version
        shell: bash
        run: |
          if [ ! -f .nvmrc ] || [ -z "$(cat .nvmrc)" ]; then
            echo "❌ .nvmrc is missing or empty"; exit 1;
          fi
          VERSION="$(tr -d '\r\n' < .nvmrc)"
          VERSION="${VERSION#v}"
          if ! [[ "$VERSION" =~ ^[0-9]+(\.[0-9]+){0,2}$ ]]; then
            echo "Invalid .nvmrc content: '$VERSION'"; exit 1;
          fi
          echo "NODE_VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "NODE_VERSION_SANITIZED=${VERSION//\//-}" >> "$GITHUB_ENV"
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            node_modules
            app/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION_SANITIZED }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION_SANITIZED }}-yarn-
      - name: Install Dependencies
        uses: ./.github/actions/yarn-install
      - name: Build Dependencies
        run: yarn build:deps
        working-directory: ./app
      - name: Run linter
        run: yarn lint
        working-directory: ./app
      - name: Run prettier
        run: yarn fmt
        working-directory: ./app

  test:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Read and sanitize Node.js version
        shell: bash
        run: |
          if [ ! -f .nvmrc ] || [ -z "$(cat .nvmrc)" ]; then
            echo "❌ .nvmrc is missing or empty"; exit 1;
          fi
          VERSION="$(tr -d '\r\n' < .nvmrc)"
          VERSION="${VERSION#v}"
          if ! [[ "$VERSION" =~ ^[0-9]+(\.[0-9]+){0,2}$ ]]; then
            echo "Invalid .nvmrc content: '$VERSION'"; exit 1;
          fi
          echo "NODE_VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "NODE_VERSION_SANITIZED=${VERSION//\//-}" >> "$GITHUB_ENV"
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            node_modules
            app/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION_SANITIZED }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION_SANITIZED }}-yarn-
      - name: Install Dependencies
        uses: ./.github/actions/yarn-install

      - name: Build
        run: yarn build:deps
        working-directory: ./app
      - name: Test
        run: yarn test
        working-directory: ./app
  build:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Read and sanitize Node.js version
        shell: bash
        run: |
          if [ ! -f .nvmrc ] || [ -z "$(cat .nvmrc)" ]; then
            echo "❌ .nvmrc is missing or empty"; exit 1;
          fi
          VERSION="$(tr -d '\r\n' < .nvmrc)"
          VERSION="${VERSION#v}"
          if ! [[ "$VERSION" =~ ^[0-9]+(\.[0-9]+){0,2}$ ]]; then
            echo "Invalid .nvmrc content: '$VERSION'"; exit 1;
          fi
          echo "NODE_VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "NODE_VERSION_SANITIZED=${VERSION//\//-}" >> "$GITHUB_ENV"
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.4"

      - uses: actions/checkout@v4
      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            node_modules
            app/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION_SANITIZED }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION_SANITIZED }}-yarn-
      - name: Cache Ruby Bundler
        uses: actions/cache@v4
        with:
          path: app/vendor/bundle
          key: ${{ runner.os }}-ruby${{ env.RUBY_VERSION }}-gems-${{ hashFiles('app/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-ruby${{ env.RUBY_VERSION }}-gems-
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: app/ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('app/ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      - name: Verify CocoaPods Cache
        run: |
          echo "Checking CocoaPods cache status..."
          if [ -d "app/ios/Pods" ] && [ "$(ls -A app/ios/Pods)" ]; then
            echo "✅ CocoaPods cache restored successfully"
            ls -la app/ios/Pods/ | head -10

            # Check if key files exist
            if [ ! -f "app/ios/Podfile.lock" ]; then
              echo "⚠️ Podfile.lock is missing - pods cache may be stale"
            fi
            # If Pods directory exists but is incomplete, clear only Pods; keep Podfile.lock
            if [ ! -d "app/ios/Pods" ] || [ -z "$(ls -A app/ios/Pods 2>/dev/null)" ]; then
              echo "⚠️ Pods directory incomplete - clearing Pods (preserving Podfile.lock)"
              rm -rf app/ios/Pods
            fi
          else
            echo "⚠️ CocoaPods cache is empty or missing - will install fresh"
          fi
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('app/android/**/gradle-wrapper.properties', 'app/android/**/gradle-wrapper.jar') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Install Mobile Dependencies
        uses: ./.github/actions/yarn-install
      - name: Build Dependencies
        run: yarn build:deps
        working-directory: ./app
      - name: Install iOS Dependencies
        run: |
          echo "Installing iOS dependencies..."
          cd app/ios

          # Clean Pods directory if it's corrupted or empty
          if [ ! -d "Pods" ] || [ -z "$(ls -A Pods 2>/dev/null)" ]; then
            echo "Cleaning empty/corrupted Pods directory..."
            rm -rf Pods Podfile.lock
          fi

          # Install pods
          bundle exec pod install --silent || { echo "❌ Pod install failed"; exit 1; }
          echo "✅ Pods installed successfully"

          # Verify installation
          if [ ! -d "Pods" ] || [ -z "$(ls -A Pods 2>/dev/null)" ]; then
            echo "❌ Pods directory is still empty after installation"
            exit 1
          fi

          echo "Pods directory contents:"
          ls -la Pods/ | head -10

          # Verify key files exist
          if [ ! -f "Pods/Target Support Files/Pods-Self/Pods-Self.debug.xcconfig" ]; then
            echo "❌ Key CocoaPods configuration file missing"
            exit 1
          fi

          echo "✅ iOS dependencies installed successfully"
      - name: Verify iOS Workspace
        run: |
          echo "Verifying iOS workspace setup..."
          cd app/ios

          if [ ! -f "OpenPassport.xcworkspace/contents.xcworkspacedata" ]; then
            echo "❌ OpenPassport.xcworkspace is missing or corrupted"
            exit 1
          fi

          if [ ! -d "Pods" ]; then
            echo "❌ Pods directory is missing"
            exit 1
          fi

          echo "✅ iOS workspace is properly configured"
      - name: Build iOS
        run: yarn ios
        working-directory: ./app
      - name: Build Android
        run: yarn android
        working-directory: ./app
